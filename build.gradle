buildscript {
	ext {
		springBootVersion = '1.5.7.RELEASE'
		jUnit5Version = '5.0.0-M5'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
//apply plugin: 'war'

group = 'com.anoop.transformpdf'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven{
	url("http://nexus.xwiki.org/nexus/content/groups/public/")
	}
}
sourceSets {
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/intTest/java')
        }
        
    }
}
configurations {
	providedRuntime
	intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
    
}
 
dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.google.guava:guava:18.0')
	compile('org.apache.pdfbox:pdfbox-tools:2.0.3')
	compile('com.itextpdf:itextpdf:5.5.10')
	compile('com.itextpdf.tool:xmlworker:5.5.10')
	compile('org.apache.poi:poi-scratchpad:3.15')
	compile('org.apache.poi:poi-ooxml:3.15')
	compile('org.apache.xmlgraphics:batik-transcoder:1.8')
	compile('net.sf.cssbox:pdf2dom:1.6')
	compile('joda-time:joda-time:2.9.7')	
	compile('org.ghost4j:ghost4j:1.0.0')
	compile('net.coobird:thumbnailator:0.4.8')
	compile('junit:junit:4.12')
	compile('log4j:log4j:1.2.17')
	compile('org.jfrog.jade.plugins.common:jade-plugin-common:1.3.8')
	compile('org.assertj:assertj-core:2.6.0')
	
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.junit.jupiter:junit-jupiter-api:5.0.0-M5')
	intTestCompile('org.springframework.boot:spring-boot-starter-test')
	intTestCompile('org.junit.jupiter:junit-jupiter-api:5.0.0-M5')
	intTestCompile('junit:junit:4.12')
	
}
task collectResults() {
  def output = file("build/reports/summary.csv")
  doLast {
    file("build/reports").mkdirs()
    output.text = '"Project","Test","Time","Result","Duration"\r\n'
    allprojects.each { project2 ->
      logger.info("Processing project ${project2.name}")
      def resultFiles = project2.fileTree("build") { include '**/TEST-*.xml' }
      resultFiles.each { file ->
        logger.info("Processing report ${file}")
        def testsuite = new XmlSlurper().parse(file)
        testsuite.testcase.each { testcase ->
          def result = "pass"
          if (!testcase.failure.isEmpty()) { result = "fail" }
          else if (!testcase.skipped.isEmpty()) { result = "skip" }
          output << "\"${project2.name}\",\"${testcase.@classname}.${testcase.@name}\",\"${testcase.@timestamp}\",\"${result}\",\"${testcase.@time}\"\r\n"
        }
      }
    }
  }
}
task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
intTest.mustRunAfter test
intTest.finalizedBy(collectResults)

